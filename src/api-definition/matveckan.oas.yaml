openapi: '3.0.3'

info: 
  title: OpenAPI Specification for Matveckan
  description: API specification document for the Matveckan system
  version: '1.0.0'
  contact:
    name: Patric Bergkvist
    email: dev@matveckan.se
    url: http://www.patricbergkvist.com

servers: 
  - url: http://localhost:44333/api/v1
    description: Development server

externalDocs:
  description: More information about Matveckan API
  url: http://www.test.nu

tags:
  - name: users
    description: All operations for users
  - name: recipes
    description: All operations for recipes
  - name: categories
    description: All operations for categories
  - name: ingredients
    description: All operations for ingredients

paths:
  /users:
    summary: Operations for users
    description: Contains all operations for users
    get:
      tags: 
        - users
      summary: Get all users
      description: Returns a list of all users
      operationId: getUsers
      responses:
        '200':
          description: Successfully returned all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/4xxResponse'
        '500':
          $ref: '#/components/responses/5xxResponse'
    post:
      tags:
        - users
      summary: Add new user
      description: Adds a new user to the system
      operationId: addUser
      requestBody:
        description: Adds a new user to the system
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successfully added user to the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/4xxResponse'
        '500':
          $ref: '#/components/responses/5xxResponse'
  /recipes:
    summary: Operations for recipes
    description: Contains all operations of recipes
    get:
      tags:
        - recipes
      summary: Gets all recipes
      description: Returns a list of all recipes
      operationId: getRecipes
      responses:
        '200':
          description: Successfully returned all recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe'
        '4XX':
          $ref: '#/components/responses/4xxResponse'
        '5XX':
          $ref: '#/components/responses/5xxResponse'
    post:
      tags:
        - recipes
      summary: Adds a recipe
      description: Adds a new recipe to the system
      operationId: addRecipe
      requestBody:
        $ref: '#/components/requestBodies/recipeBody'
      responses:
        '201':
          description: Successfully added the recipe to the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe'
  /recipes/{recipeId}:
    summary: Operations for specific recipe
    description: Contains all operations for specific recipes
    get:
      operationId: getRecipe
      summary: Gets a specific recipe based on recipeId
      description: Returns the specific recipe
      tags:
        - recipes
      parameters:
        - $ref: '#/components/parameters/recipeIdPath'
      responses:
        '200':
          description: Successfully returned recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe'
        '4XX':
          $ref: '#/components/responses/4xxResponse'
        '5XX':
          $ref: '#/components/responses/5xxResponse'
    put:
      operationId: updateRecipe
      summary: Updates a specific recipe
      description: Returns the updated recipe
      tags:
        - recipes
      parameters:
        - $ref: "#/components/parameters/recipeIdPath"
      requestBody:
        $ref: "#/components/requestBodies/recipeBody"
      responses:
        '200':
          description: Successfully updated recipe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/recipe"
    delete:
      operationId: deleteRecipe
      summary: Delete a specific recipe
      description: Removes a recipe entry from the system
      tags:
        - recipes
      parameters:
        - $ref: "#/components/parameters/recipeIdPath"
      responses:
        '200':
          description: Successfully deleted recipe
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/recipe"
        '4XX':
          $ref: "#/components/responses/4xxResponse"
        '5XX':
          $ref: "#/components/responses/5xxResponse" 
  /recipes/{recipeId}/ingredients:
    summary: Operations for ingredients to a specific recipe
    description: Contains all operations for ingredients to a specific recipe
    get:
      operationId: getIngredients
      summary: Gets all ingredients for a specific recipe
      description: Returns a list of ingredients for a specific recipe
      tags:
        - recipes
        - ingredients
      parameters:
        - $ref: '#/components/parameters/recipeIdPath'
      responses:
        '200':
          description: Successfully recived ingredients from db
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ingredient'
        '4XX':
          $ref: '#/components/responses/4xxResponse'
        '5XX':
          $ref: '#/components/responses/5xxResponse'
    post:
      operationId: addIngredient
      summary: Add new ingredient to recipe
      description: Adds a new ingredient entry to the database and returnes the ingredient
      tags:
        - recipes
        - ingredients
      parameters:
        - $ref: '#/components/parameters/recipeIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ingredient'
      responses:
        '201':
          description: Successfully added ingredient entry to database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ingredient'
        '4XX':
          $ref: '#/components/responses/4xxResponse'
        '5XX':
          $ref: '#/components/responses/5xxResponse'
    put:
      operationId: updateIngredient
      summary: Updates an ingredient
      description: Updates an ingredient entry in the database and retunes the updated ingredient
      tags:
        - recipes
        - ingredients
      parameters:
        - $ref: '#/components/parameters/recipeIdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ingredient'
      responses:
        '200':
          description: Successfully updated the ingredient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ingredient'
        '4XX':
          $ref: '#/components/responses/4xxResponse'
        '5XX':
          $ref: '#/components/responses/5xxResponse'
  /categories/{categoryName}:
    summary: Operations for recipes with a specific category
    description: Contains all operations for a specific recipe category
    get:
      tags:
        - categories
      summary: Gets all recipes with a specific category name
      description: Returns a list with all recipes from the specific categoryName
      operationId: getRecipesByCategory
      parameters:
        - $ref: '#/components/parameters/categoryNameInPath'
      responses:
        '200':
          description: Gets all recipes in specific category
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/recipe'
        '4XX':
          $ref: '#/components/responses/4xxResponse'
        '5XX':
          $ref: '#/components/responses/5xxResponse'
components:
  schemas:
    User:
      type: object
      description: Represents a user entry
      properties:
        firstName:
          type: string
          description: The users first name
        lastName:
          type: string
          description: The users last name
        nickname:
          type: string
          description: The users nickname
        password:
          type: string
          description: The users password
        phoneNumber:
          type: string
          description: The users phone number
        email:
          type: string
          format: email
          description: The users email
      required:
        - nickname
        - phoneNumber
        - password
        - email
    recipe:
      type: object
      description: Represents a recipe entry
      properties:
        id:
          type: integer
          description: Unique id for the recipe
        name:
          type: string
          description: Name of the recipe
        preparationTime: 
          type: integer
          description: Preparation time in minutes
        cookingTime:
          type: integer
          description: Cooking time in minutes
        category:
          type: string
          enum:
            - Pasta
            - Meat
            - Potato
        rating:
          type: integer
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
          description: Rating for the recipe.
        portions:
          type: integer
          description: Amount of portions for the recipe
        ingredients:
          description: Ingredients for the recipe
          type: array
          items:
              $ref: "#/components/schemas/ingredient"
        instructions:
          description: Instructions for the recipe
          type: array
          items:
            $ref: "#/components/schemas/instruction"
      required:
        - name
        - preparationTime
        - cookingTime
        - category
        - portions
        - ingredients
        - instructions
    ingredient:
      type: object
      description: Represents a ingredient entry
      properties:
        unitOfMeasurement:
          description: Represents the unit of measurement for the ingredient
          type: string
          enum:
            - grams
            - milliliters
        unit:
          type: number
          format: double
          minimum: 0
          maximum: 20000
        name:
          type: string
    addIngredient:
      type: object
      description: DTO used to update a ingredient entry in the database
      properties:
        unitOfMeasurement:
          description: Represents the unit of measurement for the ingredient
          type: string
          enum:
            - grams
            - milliliters 
        unit:
          type: number
          format: double
          minimum: 0
          maximum: 20000
        name:
          type: string
      required:
        - unitOfMeasurement
        - unit
        - name
    instruction:
      description: Represents a instruction entry
      type: object
      properties:
        stepName:
          description: Represents a step in the instruction
          type: string
      required:
        - stepName
  parameters:
    recipeIdPath:
      name: recipeId
      in: path
      description: The unique recipe id
      required: true
      schema:
        type: string
    categoryNameInPath:
      name: categoryName
      in: path
      description: Sort by categoryName
      required: true
      schema:
        type: string
  requestBodies:
    recipeBody:
      description: The updated recipe
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/recipe"
  responses:
    4xxResponse:
      description: Bad Request
    5xxResponse:
      description: Internal server error